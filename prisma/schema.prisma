// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Apartment {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  apartmentSize   Int               @map("apartment_size")
  coverImageId    String?           @map("cover_image_id")
  createdAt       DateTime          @default(now()) @map("created_at")
  description     String?
  financialRecord FinancialRecord[]
  modifiedAt      DateTime          @updatedAt @map("modified_at")
  postalCode      String            @map("postal_code")
  postOffice      String            @map("post_office")
  slug            String            @unique
  streetAddress   String            @map("street_address")
  tenants         Tenant[]
  title           String?
  user            User              @relation(fields: [userId], references: [id])
  userId          String            @map("user_id") @db.Uuid

  @@map("apartments")
}

model Tenant {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  apartment   Apartment @relation(fields: [apartmentId], references: [id])
  apartmentId String    @map("apartment_id") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at")
  email       String
  firstName   String    @map("first_name")
  lastName    String    @map("last_name")
  modifiedAt  DateTime  @updatedAt @map("modified_at")
  personId    String    @map("person_id")
  phoneNumber String    @map("phone_number")
  slug        String    @unique
  tenantFrom  DateTime  @map("tenant_from")
  tenantTo    DateTime? @map("tenant_to")

  @@map("tenants")
}

model User {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  apartments Apartment[]
  createdAt  DateTime    @default(now()) @map("created_at")
  email      String      @unique
  image      String?
  modifiedAt DateTime    @updatedAt @map("modified_at")
  name       String

  @@map("users")
}

model FinancialRecordCategory {
  id            String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  categoryType  FinancialRecordCategoryType @map("category_type")
  createdAt     DateTime                    @default(now()) @map("created_at")
  description   String?
  modifiedAt    DateTime                    @updatedAt @map("modified_at")
  name          String                      @unique
  records       FinancialRecord[]
  taxInformable Boolean                     @map("tax_informable")

  @@map("financial_record_categories")
}

enum FinancialRecordCategoryType {
  EXPENSE
  INCOME
}

model FinancialRecord {
  id           String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount       Float
  apartment    Apartment               @relation(fields: [apartmentId], references: [id])
  apartmentId  String                  @map("apartment_id") @db.Uuid
  attachmentId String?                 @map("attachment_id")
  category     FinancialRecordCategory @relation(fields: [categoryId], references: [id])
  categoryId   String                  @map("category_id") @db.Uuid
  createdAt    DateTime                @default(now()) @map("created_at")
  description  String?
  recordDate   DateTime                @map("record_date")
  modifiedAt   DateTime                @updatedAt @map("modified_at")

  @@map("financial_records")
}
